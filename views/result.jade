.panel-group(id="accordion" role="tablist" aria-multiselectable="true")
    - for (var i = 0; i<tests.length; i++) {
        - var test = tests[i]
        - var classList = "panel-collapse collapse" + (i == 0? " in":"")
        .panel.panel-default
            if test.success
                .panel-heading.passed(role="tab" id=i + "_heading")
                    .left
                        h3.panel-title
                            a(role="button" data-toggle="collapse" data-parent="#accordion" href="#" + i + "_coll" aria-expanded="false" aria-controls=i + "_coll")= "#" + (i + 1) + " test"
                    .right
                        p.passed Passed
                div(class=classList  id=i + "_coll" role="tabpanel" aria-laballedby=i + "_heading")
                    .panel-body
                        h4 Test details
                        .test_input(id=i + "_input")
                            if project == "io"
                                p Used input: '#{test.input}'
                            if project == "fibs"
                                - var inp = test.input.toArray()
                                p First and second fibonacci number: #{inp[0]} and #{inp[1]}
                                p Pair #1: #{inp[2]} and #{inp[3]}
                                p Pair #2: #{inp[4]} and #{inp[5]}
                                p Pair #3: #{inp[6]} and #{inp[7]}
                            if project == "calculator"
                                p Used input: '#{test.input}'
                            if project == "decrypt"
                                - var inp = test.input.toArray()
                                p Rotation: '#{inp[0]}'
                                p Data: '#{inp[1]}'
                            if project == "n_green_bottles"
                                p Used input: #{test.input}
                            if project == "guess_the_number_inversed"
                                p Used input: #{test.input[0]}
                                p The computer had #{test.input[1]} in mind.
                            if project == "binary_search"
                                - var search = test.input.head(0)
                                - var length = test.input.tail().head(0)
                                - var array = test.input.tail().tail().map(function(a){return " " + a}).toArray()
                                p Searching for: #{search}.
                                p Array length: #{length}.
                                p Array: #{array}.
                            if project == "stopwatch"
                                - var inps =  test.input.toArray()
                                for input in inps
                                    p Input: '#{input._1}', #{input._2}ms after 
                                        if input == inps[0]
                                            |start of the program.
                                        else
                                            |last input.
            else
                .panel-heading.failed(role="tab" id=i)
                    .left
                        h3.panel-title
                            a(role="button" data-toggle="collapse" data-parent="#accordion" href="#" + i + "_coll" aria-expanded="false" aria-controls=i + "_coll")= "#" + (i + 1) + " test"
                    .right
                        p.failed Failed
                div(class=classList id=i + "_coll" role="tabpanel" aria-laballedby=i + "_heading")
                    .panel-body
                        h4 Test details
                        .test_input(id=i + "_input")
                            if project == "io"
                                p Used input: #{test.input}
                            if project == "fibs"
                                - var inp = test.input.toArray()
                                p First and second fibonacci number: #{inp[0]} and #{inp[1]}
                                p Pair #1: #{inp[2]} and #{inp[3]}
                                p Pair #2: #{inp[4]} and #{inp[5]}
                                p Pair #3: #{inp[6]} and #{inp[7]}
                            if project == "calculator"
                                p Used input: '#{test.input}'
                            if project == "n_green_bottles"
                                p Used input: #{test.input}
                            if project == "guess_the_number_inversed"
                                p Used input (maximum number): #{test.input[0]}
                                p The computer had #{test.input[1]} in mind.
                            if project == "decrypt"
                                - var inp = test.input.toArray()
                                p Rotation: '#{inp[0]}'
                                p Data: '#{inp[1]}'
                            if project == "binary_search"
                                - var search = test.input.head(0)
                                - var length = test.input.tail().head(0)
                                - var array = test.input.tail().tail().map(function(a){return  " " + a}).toArray()
                                p Searching for: #{search}.
                                p Array length: #{length}.
                                p Array length: #{array.length}.
                                p Array: #{array}.
                            if project == "stopwatch"
                                - var inps =  test.input.toArray()
                                for input in inps
                                    p Input: '#{input._1}', #{input._2}ms after 
                                        if input == inps[0]
                                            |start of the program.
                                        else
                                            |last input.
                        hr
                        h4 Error message
                        p.test_message= test.message    
    - }